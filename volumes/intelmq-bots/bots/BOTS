{
    "Collector": {
        "File": {
            "description": "Fileinput collector fetches data from a file.",
            "module": "intelmq.bots.collectors.file.collector_file",
            "parameters": {
                "chunk_replicate_header": true,
                "chunk_size": null,
                "delete_file": false,
                "name": "__FEED__",
                "path": "/tmp/",
                "postfix": ".csv",
                "provider": "__PROVIDER__",
                "rate_limit": 300
            }
        },
        "Generator Nmap Ports": {
            "description": "Generate fake data.",
            "module": "intelmq.bots.collectors.generators.nmap_ports",
            "parameters": {
                "network": "163.10.0.0/16",
                "ports": "25,80,443,8080",
                "chance_open": 0.2,
                "iteration_time": 1,
                "stop_time": 86400,
                "count": 1000
            }
        },
        "Generator Domains": {
            "description": "Generate fake data.",
            "module": "intelmq.bots.collectors.generators.domains",
            "parameters": {
                "subdomain_of": "not working yet",
                "iteration_time": 1,
                "stop_time": 86400,
                "count": 1000
            }
        },
        "Nmap Ports": {
            "description": "Nmap collector fetches data from a file.",
            "module": "intelmq.bots.collectors.nmap.nmap_ports",
            "parameters": {
                "network": "163.10.0.0/16",
                "ports": "80,443",
                "nmap_params": "-n -T4 -Pn --max-rtt-timeout 200ms --initial-rtt-timeout 100ms --min-hostgroup 512 -oG -"
            }
        }
    },
    "Parser": {
        "Nmap Ports": {
            "description": "Parse output of nmap oG ports scan.",
            "module": "intelmq.bots.parsers.nmap.nmap_ports",
            "parameters": {}
        }
    },
    "Expert": {
        "DNS Resolver A/CNAME": {
            "description": "Resolve A and CNAME and create new event with results.",
            "module": "intelmq.bots.experts.dns.resolve_a",
            "parameters": {}
        }
    },
    "Output": {
        "Elasticsearch": {
            "description": "Elasticsearch is the bot responsible to send events to a elasticsearch.",
            "module": "intelmq.bots.outputs.elasticsearch.output",
            "parameters": {
                "elastic_host": "127.0.0.1",
                "elastic_port": 9200,
                "elastic_index": "intelmq",
                "rotate_index": "never",
                "elastic_doctype": "events",
                "http_username": null,
                "http_password": null,
                "use_ssl": false,
                "http_verify_cert": false,
                "ssl_ca_certificate": null,
                "ssl_show_warnings": true,
                "flatten_fields": "extra",
                "replacement_char": null
            }
        },
        "File": {
            "description": "File is the bot responsible to send events to a file.",
            "module": "intelmq.bots.outputs.file.output",
            "parameters": {
                "encoding_errors_mode": "strict",
                "file": "/opt/intelmq/var/lib/bots/file-output/events.txt",
                "format_filename": false,
                "hierarchical_output": false,
                "single_key": null
            }
        },
        "Files": {
            "description": "Files is the bot responsible for lockfree saving of events into separate files.",
            "module": "intelmq.bots.outputs.files.output",
            "parameters": {
                "dir": "/opt/intelmq/var/lib/bots/files-output/incoming",
                "hierarchical_output": false,
                "single_key": null,
                "suffix": ".json",
                "tmp": "/opt/intelmq/var/lib/bots/files-output/tmp"
            }
        },
        "MongoDB": {
            "description": "MongoDB is the bot responsible to send events to a MongoDB database.",
            "module": "intelmq.bots.outputs.mongodb.output",
            "parameters": {
                "collection": "<collection>",
                "database": "<database>",
                "db_pass": null,
                "db_user": null,
                "hierarchical_output": true,
                "host": "localhost",
                "port": "27017",
                "replacement_char": "_"
            }
        },
        "PostgreSQL": {
            "description": "PostgreSQL is the bot responsible to send events to a PostgreSQL Database. When activating autocommit, transactions are not used: http://initd.org/psycopg/docs/connection.html#connection.autocommit",
            "module": "intelmq.bots.outputs.postgresql.output",
            "parameters": {
                "autocommit": true,
                "database": "intelmq-events",
                "host": "localhost",
                "jsondict_as_string": true,
                "password": "<password>",
                "port": "5432",
                "sslmode": "require",
                "table": "events",
                "user": "intelmq"
            }
        }
    }
}

